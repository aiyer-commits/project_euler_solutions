import unittest
from math import sqrt


def hexagonal(n):
    return n * (2 * n - 1)


def pentagonal_root(hexa):
    return (1 + sqrt(1 + 24 * hexa)) / 6


def triangular_root(hexa):
    return (-1 + sqrt(1 + 8 * hexa)) / 2


def solution(n):
    no_solution = True
    while no_solution:
        hexa = hexagonal(n)
        p_root = pentagonal_root(hexa)
        t_root = triangular_root(hexa)
        if p_root == int(p_root) and t_root == int(t_root):
            print('Solution: ', hexa)
            return hexa
        n += 1
        if n % 10 == 0:
            print(f'Testing H_{n}...')
    return


class TestCase(unittest.TestCase):
    def test_all(self):
        cases = [(143, 40755)]
        for case, outcome in cases:
            self.assertEqual(solution(case), outcome)
        return


if __name__ == "__main__":
    print(solution(144))
    unittest.main()


""" problem
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:



Triangle Tn=n(n+1)/2 1, 3, 6, 10, 15, ...

Pentagonal Pn=n(3n−1)/2 1, 5, 12, 22, 35, ...

Hexagonal Hn=n(2n−1) 1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.



Find the next triangle number that is also pentagonal and hexagonal.
"""


""" approach
increment the fastest growing series
and check the values for fitting the remaining series
starting at H_143...

3n^2 - n - 2Pn
(1 + sqrt(1 + 24(Pn))) / 6

n^2 + n - 2Tn
(-1 + sqrt(1 + 8(Tn))) / 2

"""

""" pseudocode
hexagonal(n):
return n * (2 * n - 1)

pentagonal_root(hexa):
return (1 + sqrt(1 + 24 * hexa)) / 6

triangular_root(hexa):
return (-1 + sqrt(1 + 8 * hexa)) / 2

sol(n):
no_solution = True

while no_solution:
 hexa = hexagonal(n)
 p_root = pentagonal_root(hexa)
 t_root = triangular_root(hexa)
 if p_root == int(p_root) and t_root == int(t_root):
  print('Solution: ', hexa)
  return hexa
 n += 1
 if n % 10 == 0:
  print(f'testing H_{n}...')

"""
